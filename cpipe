#!/usr/bin/env bash
set -e

# Set useful variables
ROOT=$(readlink -f $(dirname $BASH_SOURCE))

# Load config groovy
source pipeline/scripts/config_groovy_util.sh
load_config

# Load environment, e.g. tools like python, R
source environment.sh

# Printing utilities
bold=$(tput bold)
normal=$(tput sgr0)

#Parse command line arguments
JAVA_CHECK=1
ARGS=$(env POSIXLY_CORRECT=1 getopt -o j --long "no-java-check,help,usage" -n $(basename $BASH_SOURCE) -- "$@")
eval set -- "$ARGS"
while true ; do
    case "$1" in
        -j|--no-java-check)
            JAVA_CHECK=0
            shift 1
        ;;
        --help|--usage)
            echo "${normal}Usage: ./cpipe <CPIPE OPTIONS> COMMAND <COMMAND OPTIONS>"
            echo "${bold}Commands (type --help after any command for more details):"
            echo "  ${bold}pipeline${normal}: Runs the analysis pipeline"
            echo "  ${bold}test${normal}: Runs the pipeline tests"
            echo "  ${bold}batch${normal}: Creates and modifies analysis batches"
            echo "  ${bold}genelist${normal}: Creates and modifies genelists"
            echo "  ${bold}metadata${normal}: Creates and modifies sample metadata files"
            echo "${bold}Cpipe Options"
            echo "  ${bold}--help, --usage"
            echo "    ${normal}Prints this help page"
            echo "  ${bold}-j, --no-java-check"
            echo "    ${normal}Disables the java version check. Only do this if you know what you're doing"
            exit 0
        ;;
        --)
            shift
            break
        ;;
    esac
done

# Run the java check if necessary
if (( $JAVA_CHECK )) ; then
    doit check_java #> /dev/null
fi

case "$1" in
    batch)
        #  e.g. docker run cpipe batch add_batch --batch batch_identifier --profile profile_name
        shift 1
        python pipeline/scripts/manage_batch.py "$@" < /dev/stdin
    ;;
    genelist)
        # e.g. docker run cpipe genelist show_bed --profile profile_name
        shift 1
        python pipeline/scripts/manage_genelists.py "$@" < /dev/stdin
    ;;
    metadata)
        shift 1
        case "$1" in
            check)
                #e.g. docker run cpipe metadata check < ./batches/batch_identifier/samples.txt
                python pipeline/scripts/check_metadata.py "$@" < /dev/stdin
            ;;
            update)
                #e.g. docker run cpipe metadata update --sample sample_name --name prioritised_genes --value “4:ABC1,ABC2” --target ./batches/batch_identifier/samples.txt
                python pipeline/scripts/update_metadata.py "$@" < /dev/stdin
            ;;
        esac
    # e.g. docker run cpipe genelist show_bed --profile profile_name
    ;;
    pipeline)
        
        # Parse args
        shift 1
        ARGS=$(getopt -o b:p: --long "batch:,bpipe-options:,help,usage" -n $(basename $BASH_SOURCE) -- "$@")
        eval set -- "$ARGS"

        # Default args
        BATCH='batch'

        # Process args - they can specify a batch directory to replace the default 'batch', and they can specify bpipe options manually
        while true ; do
                case "$1" in
                    -b|--batch)
                        BATCH=$2
                        shift 2
                    ;;
                    -p|--bpipe-options)
                        BPIPE_OPTIONS=$2
                        shift 2
                    ;;
                    --usage|--help)
                        echo "${normal}Usage: ./cpipe pipeline <COMMAND OPTIONS>"
                        echo "${bold}Pipeline Options"
                        echo "  ${bold}--help, --usage"
                        echo "    ${normal}Prints this help page"
                        echo "  ${bold}-b, --batch <batch name>"
                        echo "    ${normal}Specify a batch to run (a subdirectory inside batches). Defaults to a batch named 'batch'"
                        echo "  ${bold}-p, --bpipe-options <options>"
                        echo "    ${normal}Specify options to pass to bpipe. Refer to http://docs.bpipe.org/Commands/Commands/ for reference"
                        exit 0
                    ;;
                    --)
                        shift
                        break
                    ;;
                esac
        done

        mkdir -p batches/${BATCH}/analysis
        cd batches/${BATCH}/analysis
        ../../../bpipe run ${BPIPE_OPTIONS} ../../../pipeline/pipeline.groovy ../samples.txt < /dev/stdin
    ;;
    test)
        shift 1
        pipeline/scripts/run_unit_tests.sh && pipeline/scripts/run_tests.sh detect_mutations_test
    ;;
esac
