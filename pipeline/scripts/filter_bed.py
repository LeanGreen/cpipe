#!/usr/bin/env python
'''
    Removes negative regions from the bed file, which may have been generated by bedtools slop
    Usage: python filter_bed.py < bed_file > filtered_bed_file
'''

import sys

def filter_bed(fh_in, fh_out, exclude=None, include=None, log=None):
    '''
        filter incoming bed file for reversed coordinates and a list of genes
    '''
    exclude_genes = set()
    include_genes = set()
    if exclude is not None:
        for line in exclude:
            if not line.startswith('#'):
                exclude_genes.add(line.strip().upper())
    if include is not None:
        for line in include:
            if not line.startswith('#'):
                include_genes.add(line.strip().upper())

    for line in fh_in:
        if line.startswith('#'):
            continue
        else:
            fields = [x.strip() for x in line.split('\t')]
            if len(fields) > 2:
                if int(fields[2]) > int(fields[1]): # size ok
                    if len(fields) <= 3 or (fields[3].upper() not in exclude_genes and (len(include_genes) == 0 or fields[3].upper() in include_genes)):
                        fh_out.write(line)
                else:
                    pass # filter negative
                    #fh_out.write( '#{0}'.format( line ) )
            else:
                fh_out.write(line)

def main():
    '''
        filter stdin and write to stdout
    '''
    import argparse
    parser = argparse.ArgumentParser(description='Filter bed')
    parser.add_argument('--exclude', required=False, help='list of genes to exclude')
    parser.add_argument('--include', required=False, help='list of genes to include')
    args = parser.parse_args()

    if args.exclude is not None:
        filter_bed(sys.stdin, sys.stdout, open(args.exclude, 'r'))
    elif args.include is not None:
        filter_bed(sys.stdin, sys.stdout, None, open(args.include, 'r'), log=sys.stderr)
    else:
        filter_bed(sys.stdin, sys.stdout)

if __name__ == '__main__':
    main()
