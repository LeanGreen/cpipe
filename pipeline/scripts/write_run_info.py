#!/usr/bin/env python
'''
###########################################################################
#
# This file is part of Cpipe.
#
# Cpipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, under version 3 of the License, subject
# to additional terms compatible with the GNU General Public License version 3,
# specified in the LICENSE file that is part of the Cpipe distribution.
#
# Cpipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cpipe.  If not, see <http:#www.gnu.org/licenses/>.
#
###########################################################################
#
# Purpose:
#   write run info to stdout
# Usage:
#   See main() for arguments
#
###########################################################################
'''

import datetime
import glob
import os
import sys

def write_info(info, target):
    '''
        write results as tab separated key value pairs
    '''
    target.write('# this file was automatically generated by cpipe. if you modify it, add an explanation.\n')
    for key in sorted(info.keys()):
        target.write('{0}\t{1}\n'.format(key, info[key]))

def find_version(fh):
    '''
        find a line of the form '#version nnn'
    '''
    for line in fh:
        if line.startswith('#version '):
            return line.strip().split()[1]

    return 'unknown'

def main():
    import argparse
    parser = argparse.ArgumentParser(description='Write pipeline run info')
    parser.add_argument('--run_id', required=False, help='run id of this analysis')
    parser.add_argument('--base', required=False, help='cpipe base directory')
    args = parser.parse_args()
    info = {}
    info['run_id'] = 'unknown' if args.run_id is None else args.run_id
    info['date_run'] = datetime.datetime.now().strftime('%Y%m%d')
    if args.base:
        # cpipe version
        version_file = os.path.join(args.base, 'version.txt')
        if os.path.isfile(version_file):
            info['cpipe_version'] = open(version_file, 'r').readline().strip()

        # capture
        config_file = os.path.join(args.base, 'pipeline', 'config.groovy')
        if os.path.isfile(config_file):
            for line in open(config_file, 'r'):
                if 'EXOME_TARGET' in line:
                    info['capture'] = line.split('=')[1].strip('"\'\n')

        # incidentalome
        incidentalome = os.path.join(args.base, 'designs', 'genelists', 'incidentalome.genes.txt')
        if os.path.isfile(incidentalome):
            info['incidentalome'] = find_version(open(incidentalome, 'r'))
        # exons
        exons = os.path.join(args.base, 'designs', 'genelists', 'exons.bed')
        if os.path.isfile(exons):
            info['exons'] = find_version(open(exons, 'r'))

        # genes
        for profile in glob.glob(os.path.join(args.base, 'designs/*/*.genes.txt')):
            if 'genelists' in profile:
                continue
            version = find_version(open(profile, 'r'))
            name = os.path.basename(profile).split('.')[0]
            info['genelist_{0}'.format(name)] = version

    write_info(info, sys.stdout)

if __name__ == '__main__':
    main()
